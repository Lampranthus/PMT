--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=8 LPM_WIDTH=3 data enable eq
--VERSION_BEGIN 24.1 cbx_cycloneii 2025:03:05:20:03:09:SC cbx_lpm_add_sub 2025:03:05:20:03:09:SC cbx_lpm_compare 2025:03:05:20:03:09:SC cbx_lpm_decode 2025:03:05:20:03:09:SC cbx_mgl 2025:03:05:20:10:25:SC cbx_nadder 2025:03:05:20:03:09:SC cbx_stratix 2025:03:05:20:03:09:SC cbx_stratixii 2025:03:05:20:03:09:SC  VERSION_END


-- Copyright (C) 2025  Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Altera and sold by Altera or its authorized distributors.  Please
--  refer to the Altera Software License Subscription Agreements 
--  on the Quartus Prime software download page.



--synthesis_resources = lut 8 
SUBDESIGN decode_rsa
( 
	data[2..0]	:	input;
	enable	:	input;
	eq[7..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[7..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode2753w[3..0]	: WIRE;
	w_anode2770w[3..0]	: WIRE;
	w_anode2780w[3..0]	: WIRE;
	w_anode2790w[3..0]	: WIRE;
	w_anode2800w[3..0]	: WIRE;
	w_anode2810w[3..0]	: WIRE;
	w_anode2820w[3..0]	: WIRE;
	w_anode2830w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[7..0] = eq_wire[7..0];
	eq_wire[] = ( w_anode2830w[3..3], w_anode2820w[3..3], w_anode2810w[3..3], w_anode2800w[3..3], w_anode2790w[3..3], w_anode2780w[3..3], w_anode2770w[3..3], w_anode2753w[3..3]);
	w_anode2753w[] = ( (w_anode2753w[2..2] & (! data_wire[2..2])), (w_anode2753w[1..1] & (! data_wire[1..1])), (w_anode2753w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode2770w[] = ( (w_anode2770w[2..2] & (! data_wire[2..2])), (w_anode2770w[1..1] & (! data_wire[1..1])), (w_anode2770w[0..0] & data_wire[0..0]), enable_wire);
	w_anode2780w[] = ( (w_anode2780w[2..2] & (! data_wire[2..2])), (w_anode2780w[1..1] & data_wire[1..1]), (w_anode2780w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode2790w[] = ( (w_anode2790w[2..2] & (! data_wire[2..2])), (w_anode2790w[1..1] & data_wire[1..1]), (w_anode2790w[0..0] & data_wire[0..0]), enable_wire);
	w_anode2800w[] = ( (w_anode2800w[2..2] & data_wire[2..2]), (w_anode2800w[1..1] & (! data_wire[1..1])), (w_anode2800w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode2810w[] = ( (w_anode2810w[2..2] & data_wire[2..2]), (w_anode2810w[1..1] & (! data_wire[1..1])), (w_anode2810w[0..0] & data_wire[0..0]), enable_wire);
	w_anode2820w[] = ( (w_anode2820w[2..2] & data_wire[2..2]), (w_anode2820w[1..1] & data_wire[1..1]), (w_anode2820w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode2830w[] = ( (w_anode2830w[2..2] & data_wire[2..2]), (w_anode2830w[1..1] & data_wire[1..1]), (w_anode2830w[0..0] & data_wire[0..0]), enable_wire);
END;
--VALID FILE
